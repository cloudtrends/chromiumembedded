// Copyright (c) 2013 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/ctocpp/zoom_handler_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

bool CefZoomHandlerCToCpp::OnGetZoomLevel(CefRefPtr<CefBrowser> browser,
    const CefString& url, double& zoomLevel) {
  if (CEF_MEMBER_MISSING(struct_, on_get_zoom_level))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty())
    return false;

  // Execute
  int _retval = struct_->on_get_zoom_level(struct_,
      CefBrowserCppToC::Wrap(browser),
      url.GetStruct(),
      &zoomLevel);

  // Return type: bool
  return _retval?true:false;
}

bool CefZoomHandlerCToCpp::OnSetZoomLevel(CefRefPtr<CefBrowser> browser,
    const CefString& url, double zoomLevel) {
  if (CEF_MEMBER_MISSING(struct_, on_set_zoom_level))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty())
    return false;

  // Execute
  int _retval = struct_->on_set_zoom_level(struct_,
      CefBrowserCppToC::Wrap(browser),
      url.GetStruct(),
      zoomLevel);

  // Return type: bool
  return _retval?true:false;
}


#ifndef NDEBUG
template<> long CefCToCpp<CefZoomHandlerCToCpp, CefZoomHandler,
    cef_zoom_handler_t>::DebugObjCt = 0;
#endif

